console.log(
  "кот" > "код",
  `= true 
  Сравнение строк идёт посимвольно, первые два символа равны, а код символа "т" больше кода символа "д".
  `
);
console.log(
  "2" + 2 * "2",
  `= 24 (строка) 
  Операторы выполняются по приоритету (у умножения приоритет выше). 
  Оператор умножения преобразует оба операнда к числам и перемножает их (2*2=4). 
  Бинарный плюс при наличии одного операнда типа "строка" второй тоже преобразует в строку и конкатенирует их ("2"+4="24").
  `
);
console.log(
  undefined == null,
  `= true 
  undefind при нестрогом сравнении равен либо самому себе, либо null.
  `
);
console.log(
  undefined != null,
  `= false 
  Аналогично предыдущему примеру, null нестрого равен undefind, поэтому их нестрогое неравенство ложно.
  `
);
console.log(
  null == 0,
  `= false 
  null нестрого равен только самому себе или undefind, поэтому их нестрогое неравенство с нолём ложно.
  `
);
console.log(
  2 > "3",
  `= false 
  При сравнении операнды приводятся к числам и далее срвниваются.
  `
);
console.log(
  null - false + true,
  `= 1 (число) 
  Операторы выполняются по порядку слева направо (приоритет  у них одинаковый). 
  При математических операциях операнды приводятся к числу (null -> 0, false -> 0, true -> 1).
  `
);
console.log(
  1 / "l",
  `= NaN 
  При математических операциях операнды приводятся к числу ("l" -> NaN), далее любая операция с NaN будет давать NaN.
  `
);
console.log(
  "2" * "3",
  `= 6 (число) 
  При математических операциях операнды приводятся к числу.
  `
);
console.log(
  4 + 5 + "O",
  `= "9O" (строка) 
  Операторы выполняются по порядку слева направо (приоритет  у них одинаковый). 
  Первый плюс сложит числа (4+5=9), а второй приведёт оба операнда к строкам (так как один из них строка) и конкатенирует их (9 -> "9"; "9"+"O"="9O").
  `
);
console.log(
  "l" + 4 + 5,
  `= "l45" 
  Операторы выполняются по порядку слева направо. 
  Оба плюса будут приводить свои операнды к строкам (так как первый из операндов строка) и конкатенировать их (4 -> "4"; "l"+"4"="l4"; 5 -> "5"; "l4"+"5"="l45").
  `
);
console.log(
  "4" - 2,
  `= 2 (число) 
  При математических операциях операнды приводятся к числу.
  `
);
console.log(
  "4" - "4x",
  `= NaN 
  При математических операциях операнды приводятся к числу ("4x" -> NaN), далее любая операция с NaN будет давать NaN.
  `
);
console.log(
  "23" == 23,
  `= true 
  При сравнении операнды приводятся к числам и далее срвниваются.
  `
);
console.log(
  null == false,
  `= false 
  null нестрого равен только самому себе или undefind, поэтому их нестрогое неравенство с false ложно.
  `
);
console.log(
  " -4 " / 0 + 1,
  `= -Infinity 
  Операторы выполняются слева направо. При математических операциях операнды приводятся к числу. 
  Деление -4 на ноль даёт минус бесконечность, дальнейшее добавление единицы её не увеличивает.
  `
);
console.log(
  null + 1,
  `= 1 (число) 
  При математических операциях операнды приводятся к числу (null -> 0).
  `
);
console.log(
  undefined + null,
  `= NaN 
  При математических операциях операнды приводятся к числу ("undefind" -> NaN, null -> 0), любая операция с NaN даёт NaN.
  `
);
console.log(
  1 === "1",
  `= false 
  При строгом равенстве преобразование типов не производится, операнды разных типов не равны друг другу.
  `
);
console.log(
  "2" > 10,
  `= false 
  При сравнении операнды приводятся к числам и далее срвниваются.
  `
);
console.log(
  NaN == undefined,
  `= false 
  undefind нестрого равен только самому себе или null, поэтому их нестрогое неравенство с NaN ложно.
  `
);
